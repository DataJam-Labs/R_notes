stargazer(type = "text")
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>% as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","p05", "sd","min","max"), type = "text")
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>% as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","p50", "sd","min","max"), type = "text")
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>% as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","p50", "sd"), type = "text")
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>% as.data.frame() %>%
stargazer(summary.stat = c("n", "p50", "sd","min","max"), type = "text")
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>% as.data.frame() %>%
stargazer(summary.stat = c("n", "mean", "sd","min","max"), type = "text")
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>% as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"), type = "text")
regiones <- unique(covid_comunas$region)
regiones
regiones <- unique(covid_comunas$region_nombre)
regiones
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"), type = "text")
}
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"), type = "text")
}
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
cat("========== Región : ", r, "==========")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"), type = "text")
cat("=====================================")
}
# Tabla Descriptivos
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"), type = "text")
cat("===========================")
}
# Tabla Descriptivos
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"), type = "text")
}
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
rownames = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar"),
type = "text")
}
# Tabla Descriptivos
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar"),
type = "text")
}
# Tabla Descriptivos
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar", "Muertes al 2020-06-12",  "Muertes al 2020-11-27"),
type = "text")
}
for (r in regiones) {
name <- paste0(dirdatos, "tabla_",regiones)
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar", "Muertes al 2020-06-12",  "Muertes al 2020-11-27"),
type = "text")
}
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
name <- paste0(dirdatos, "tabla_",r)
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar", "Muertes al 2020-06-12",  "Muertes al 2020-11-27"),
type = "text")
}
name
# Tabla Descriptivos
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
name_file <- paste0(dirdatos, "tabla_",r,".txt")
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar", "Muertes al 2020-06-12",  "Muertes al 2020-11-27"),
type = "text",
out = name_file)
}
# Tabla Descriptivos
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
name_file <- paste0(dirresultados, "tabla_",r,".txt")
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar", "Muertes al 2020-06-12",  "Muertes al 2020-11-27"),
type = "text",
out = name_file)
}
covid_comunas  <- covid_comunas %>% (pct_muertes__2020_11_27 = `2020-11-27`/Poblacion)
covid_comunas  <- covid_comunas %>% (pct_muertes_2020_11_27 = `2020-11-27`/Poblacion)
covid_comunas  <- covid_comunas %>% mutate(pct_muertes_2020_11_27 = `2020-11-27`/Poblacion)
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27)) + geom_hist()
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27)) + geom_histogram()
covid_comunas  <- covid_comunas %>% mutate(pct_muertes_2020_11_27 = 100000*(`2020-11-27`/Poblacion))
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27)) + geom_histogram()
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27)) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna")
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27)) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d() + scale_fill_viridis_d()
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d() + scale_fill_viridis_d()
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="magma") + scale_fill_viridis_d(option="magma")
covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma")
covid_comunas  <- covid_comunas %>% mutate(pct_muertes_2020_11_27 = 100000*(`2020-11-27`/Poblacion))
histograma <- covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma")
name_file <- paste0(dirresultados, "histograma_muertes.jpg")
ggsave(name_file,histograma)
histograma <- covid_comunas %>% ggplot(aes(x=pct_muertes_2020_11_27, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
theme(legend.position="none")
name_file <- paste0(dirresultados, "histograma_muertes.jpg")
ggsave(name_file,histograma)
View(covid_comunas)
covid_comunas %>% glimpse()
covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, ~ (1*.x)/Poblacion )
)
casen <- casen %>% select(comuna, folio, edad, esc, ytotcorh) %>% group_by(folio) %>% mutate(npers = n() ) %>% ungroup()
# calcula medias por comuna
comunas <- casen %>% group_by(comuna) %>% summarise(across(everything(), ~ mean(.x, na.rm=T) ) ) %>% select(-folio)
# renombra y transforma variables previo a juntar bases
covid <- covid %>% rename( region = `Codigo region`, region_nombre = Region, comuna = `Codigo comuna`, comuna_nombre = Comuna) %>% mutate(comuna = as.numeric(comuna))
# junta bases de datos covid e info comunas casen
covid_comunas <- covid %>% left_join(comunas, by="comuna")
covid_comunas %>% mutate(a = across(`2020-06-12`:`2020-11-27`, ~ (100000*.x)/Poblacion )
)
covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, a = ~ (100000*.x)/Poblacion ))
covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, list( tasa = ~ (100000*.x)/Poblacion)) )
covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, list( tasa = ~ (100000*.x)/Poblacion)), .names = "{fn}_{col}" )
covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, list( tasa = ~ (100000*.x)/Poblacion, .names = "{fn}_{col}")) )
covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, list(~ (100000*.x)/Poblacion)) )
covid_comunas  <- covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, list(tasa = ~ (100000*.x)/Poblacion)) )
covid_comunas
# selecciona variables relevantes y calcula número de personas por hogar
casen <- casen %>% select(comuna, folio, edad, esc, ytotcorh) %>% group_by(folio) %>% mutate(npers = n() ) %>% ungroup()
# calcula medias por comuna
comunas <- casen %>% group_by(comuna) %>% summarise(across(everything(), ~ mean(.x, na.rm=T) ) ) %>% select(-folio)
# renombra y transforma variables previo a juntar bases
covid <- covid %>% rename( region = `Codigo region`, region_nombre = Region, comuna = `Codigo comuna`, comuna_nombre = Comuna) %>% mutate(comuna = as.numeric(comuna))
# junta bases de datos covid e info comunas casen
covid_comunas <- covid %>% left_join(comunas, by="comuna")
# Transforma todas las variables de conteo de muertes (`2020-06-12`,`2020-06-15`, etc.) en "muertes por 100 mil habitantes"
covid_comunas  <- covid_comunas %>% mutate(across(`2020-06-12`:`2020-11-27`, ~ (100000*.x)/Poblacion) )
covid_comunas
histograma <- covid_comunas %>% ggplot(aes(x=`2020_11_27`, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
theme(legend.position="none")
histograma
histograma <- covid_comunas %>% ggplot(aes(x=`2020_11_27`, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
theme(legend.position="none")
name_file <- paste0(dirresultados, "histograma_muertes.jpg")
ggsave(name_file,histograma)
covid_comunas %>% ggplot(aes(x=`2020_11_27`, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
theme(legend.position="none")
covid_comunas
histograma <- covid_comunas %>% ggplot(aes(x=`2020-11-27`, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
theme(legend.position="none")
histograma
# Tabla Descriptivos
regiones <- unique(covid_comunas$region_nombre)
for (r in regiones) {
name_file <- paste0(dirresultados, "tabla_",r,".txt")
cat("===== Región : ", r, "=====")
covid_comunas %>% select(region_nombre, Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
filter(region_nombre==r) %>%
select(-region_nombre) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd","min","max"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar", "Muertes por 100k hbs al 2020-06-12",  "Muertes por 100k hbs al 2020-11-27"),
type = "text",
out = name_file)
}
# Histograma
histograma <- covid_comunas %>% ggplot(aes(x=`2020-11-27`, fill="",colour="")) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
theme(legend.position="none")
name_file <- paste0(dirresultados, "histograma_muertes.jpg")
ggsave(name_file,histograma)
covid_comunas %% glimpse()
covid_comunas %>% glimpse()
modelo_inicio <- lm(`2020-06-12` ~  edad + esc + ytotcorh + npers, data= covid_comunas)
modelo_inicio
summary(modelo_inicio)
modelo_actual <- lm(`2020-11-27` ~  edad + esc + ytotcorh + npers, data= covid_comunas)
summary(modelo_actual)
modelo_actual <- lm(`2020-11-27` ~  edad + esc + ytotcorh + npers, data= covid_comunas)
summary(modelo_actual)
summary(modelo_inicio)
modelo_inicio <- lm(`2020-06-12` ~  edad + esc + ytotcorh + npers, data= covid_comunas)
modelo_actual <- lm(`2020-11-27` ~  edad + esc + ytotcorh + npers, data= covid_comunas)
name_file <- paste0(dirresultados, "modelos_muertes.txt")
stargazer(modelo_inicio, modelo_actual,
type = "text",
column.labels = c("Junio 2020", "Noviembre 2020"),
out = name_file)
covid_comunas %>% select(`2020-06-12`,`2020-11-27`)
covid_comunas %>% select(comuna,`2020-06-12`,`2020-11-27`) %>%
pivot_longer(-comuna, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x=muertes_100k, group=mes, fill=mes,colour=mes)) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
theme(legend.position="none")
histograma <- covid_comunas %>% select(comuna,`2020-06-12`,`2020-11-27`) %>%
pivot_longer(-comuna, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x=muertes_100k, group=mes, fill=mes,colour=mes)) + geom_histogram(alpha=0.3) +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma")
histograma
histograma <- covid_comunas %>% select(comuna,`2020-06-12`,`2020-11-27`) %>%
pivot_longer(-comuna, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x=muertes_100k, group=mes, fill=mes,colour=mes)) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
facet_grid( . ~ mes)
histograma
covid_comunas %>%
pivot_longer(cols = `2020-06-12`:`2020-11-27`, names_to = "mes", values_to = "muertes_100k")
covid_comunas %>%
pivot_longer(cols = `2020-06-12`:`2020-11-27`, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x= as.Date(mes), y=muertes_100k, group=comuna, colour=region)) + geom_line()
covid_comunas %>%
pivot_longer(cols = `2020-06-12`:`2020-11-27`, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x= as.Date(mes), y=muertes_100k, group=comuna, colour=region_nombre)) + geom_line() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma")
covid_comunas %>%
pivot_longer(cols = `2020-06-12`:`2020-11-27`, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x= as.Date(mes), y=muertes_100k, group=comuna, colour=region_nombre)) + geom_line() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
facet_wrap( . ~ region_nombre)
trajectorias <- covid_comunas %>%
pivot_longer(cols = `2020-06-12`:`2020-11-27`, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x= as.Date(mes), y=muertes_100k, group=comuna, colour=region_nombre)) + geom_line(alpha=0.7) +
labs(x="Fecha", y="Muertes Covid-19 por 100k habitantes") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
facet_wrap( . ~ region_nombre)
name_file <- paste0(dirresultados, "trajectoria_muertes.jpg")
ggsave(name_file,histograma)
trajectorias
################################################## Preámbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("tidyverse")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/repo/homework/t2_answers/"
dircode     <- paste0(folder,"code/")
dirdata       <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
############################################# Importar datos #################################################
# Set working directory
getwd()
setwd(dirdata)
getwd()
duncan <- read_csv("Duncan.csv"); duncan
########################################## Exploración de datos ##############################################
# Llama otro R script que contiene análisis.
# Organizar el trabajo de esta manera permite que el código sea más legible y manejable.
# Establece el directorio de trabajo correspondiente
setwd(dircode)
source("2_exploration.R")
############################################ Recodificación #################################################
# Establece el directorio de trabajo correspondiente
setwd(dircode)
source("3_recoding.R")
############################################## Data analysis #################################################
# Set working directory
setwd(dircode)
source("4_analyses.R")
################################################## Preámbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("tidyverse")
library("readr")
library("haven")
library("viridis")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/hw_ans/tf/"
dircodigo       <- paste0(folder,"codigo/")
dirdatos        <- paste0(folder,"datos/")
dirresultados   <- paste0(folder,"resultados/")
############################################# Importar datos #################################################
# Set working directory
setwd(dirdatos)
covid <- read_csv("CasosFallecidosPorComuna.csv"); covid
casen <- read_dta("Casen 2017.dta"); casen
##################################### Limpieza y transformación de datos #####################################
setwd(dircodigo)
source("1_limpieza_datos.R")
############################################### Análisis de datos #############################################
setwd(dircodigo)
source("2_analisis.R")
?ggsve
?ggsave
trajectorias <- covid_comunas %>%
pivot_longer(cols = `2020-06-12`:`2020-11-27`, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x= as.Date(mes), y=muertes_100k, group=comuna, colour=region_nombre)) + geom_line(alpha=0.7) +
labs(x="Fecha", y="Muertes Covid-19 por 100k habitantes") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
facet_wrap( . ~ region_nombre)
name_file <- paste0(dirresultados, "trajectoria_muertes.jpg")
ggsave(name_file,trajectorias, width = 10, height = 6, units = c("cm"), dpi = 320)
name_file <- paste0(dirresultados, "trajectoria_muertes.jpg")
ggsave(name_file,trajectorias, width = 20, height = 12, units = c("cm"), dpi = 320)
histograma <- covid_comunas %>% select(comuna,`2020-06-12`,`2020-11-27`) %>%
pivot_longer(-comuna, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x=muertes_100k, group=mes, fill=mes,colour=mes)) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
facet_grid( . ~ mes)
name_file <- paste0(dirresultados, "histograma_muertes.jpg")
ggsave(name_file,histograma, width = 14, height = 12, units = c("cm"), dpi = 320)
histograma <- covid_comunas %>% select(comuna,`2020-06-12`,`2020-11-27`) %>%
pivot_longer(-comuna, names_to = "mes", values_to = "muertes_100k") %>%
ggplot(aes(x=muertes_100k, group=mes, fill=mes,colour=mes)) + geom_histogram() +
labs(x="Muertos por cada 100 mil habitantes al día 2020-11-27", y="Recuento", title="Distribución de muertes por Covid-19 al día 2020-11-27 por comuna") +
scale_color_viridis_d(option="plasma") + scale_fill_viridis_d(option="plasma") +
facet_grid( . ~ mes)
name_file <- paste0(dirresultados, "histograma_muertes.jpg")
ggsave(name_file,histograma, width = 20, height = 12, units = c("cm"), dpi = 320)
################################################## Preámbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("tidyverse")
library("readr")
library("haven")
library("viridis")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/hw_ans/tf/"
dircodigo       <- paste0(folder,"codigo/")
dirdatos        <- paste0(folder,"datos/")
dirresultados   <- paste0(folder,"resultados/")
############################################# Importar datos #################################################
# Set working directory
setwd(dirdatos)
covid <- read_csv("CasosFallecidosPorComuna.csv"); covid
casen <- read_dta("Casen 2017.dta"); casen
##################################### Limpieza y transformación de datos #####################################
setwd(dircodigo)
source("1_limpieza_datos.R")
############################################### Análisis de datos #############################################
setwd(dircodigo)
source("2_analisis.R")
################################################## Preámbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("tidyverse")
library("readr")
library("haven")
library("viridis")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/hw_ans/tf/"
dircodigo       <- paste0(folder,"codigo/")
dirdatos        <- paste0(folder,"datos/")
dirresultados   <- paste0(folder,"resultados/")
############################################# Importar datos #################################################
# Set working directory
setwd(dirdatos)
covid <- read_csv("CasosFallecidosPorComuna.csv"); covid
casen <- read_dta("Casen 2017.dta"); casen
##################################### Limpieza y transformación de datos #####################################
setwd(dircodigo)
source("1_limpieza_datos.R")
############################################### Análisis de datos #############################################
setwd(dircodigo)
source("2_analisis.R")
write_csv("covid_comunas.csv", covid_comunas)
write_csv(covid_comunas, "covid_comunas.csv")
folder <- "~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/hw_ans/tf/"
dirdatos	    <- paste0(folder,"datos/")
setwd(dirdatos)
covid_comunas %>% select(Poblacion, edad, esc,ytotcorh, npers, `2020-06-12`,`2020-11-27`) %>%
as.data.frame() %>%
stargazer(summary.stat = c("n", "mean","median", "sd"),
covariate.labels  = c("Población", "Edad", "Escolaridad","Ingreso total hogar", "Número integrantes hogar", "Muertes por 100k hbs al 2020-06-12",  "Muertes por 100k hbs al 2020-11-27"),
type = "text",
out = name_file)
setwd(dirdatos)
write_csv(covid_comunas, "covid_comunas.csv")
################################################## Preámbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("tidyverse")
library("readr")
library("haven")
library("viridis")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/hw_ans/tf/"
dircodigo       <- paste0(folder,"codigo/")
dirdatos        <- paste0(folder,"datos/")
dirresultados   <- paste0(folder,"resultados/")
############################################# Importar datos #################################################
# Set working directory
setwd(dirdatos)
covid <- read_csv("CasosFallecidosPorComuna.csv"); covid
casen <- read_dta("Casen 2017.dta"); casen
##################################### Limpieza y transformación de datos #####################################
setwd(dircodigo)
source("1_limpieza_datos.R")
############################################### Análisis de datos #############################################
setwd(dircodigo)
source("2_analisis.R")
update.packages("infinitemoonreader")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("xaringan")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("xaringan")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("xaringan")
xaringan:::inf_mr()
install.packages("rmarkdown")
install.packages("knitr")
install.packages("xaringan")
install.packages("xaringan")
xaringan:::inf_mr()
xaringan:::inf_mr()
