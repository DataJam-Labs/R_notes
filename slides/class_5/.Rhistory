data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores")) %>%
left_join(mitabla, by=c("region","sexo", "edad_cat")) %>%
select(region,sexo,mean_ytotcor, median_ytotcor, ratio)
xaringan:::inf_mr()
ci95
ci_beta2_bs
ci_beta2_bs[1]
data_b  <- sample_n(affairsdata,size=nrow(affairsdata),replace=TRUE)
logit_b <- glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=data_b)
data_b  <- sample_n(affairsdata,size=nrow(affairsdata),replace=TRUE)
logit_b <- glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=data_b)
margins(logit_b)
?margins
margins(logit_b, variables = "ym")
margins(logit_b, variables = "ym") + 1
margins(logit_b, variables = "ym") %>% as.numeric()
margins(logit_b, variables = "ym")[1]
margins(logit_b, variables = "ym")
margins(logit_b, variables = "ym") -> a
a
a$ym
a$dydx_ym
bs_expbeta2  <- function(x) {
data_b  <- sample_n(affairsdata,size=nrow(affairsdata),replace=TRUE)
logit_b <- glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=data_b)
beta2_b <- logit_b$coefficients[3]
p_hat   <- predict(logit_b, type = "response")
me_ym   <- beta2_b*p_hat
return(ame_ym = mean(me_ym ))
}
bs_expbeta2
bs_expbeta2()
bs_expbeta2()
bs_expbeta2()
bs_expbeta2()
ame_ym_bs <- replicate(nreps,bs_ame_ym() )
bs_ame_ym  <- function(x) {
data_b  <- sample_n(affairsdata,size=nrow(affairsdata),replace=TRUE)
logit_b <- glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=data_b)
beta2_b <- logit_b$coefficients[3]
p_hat   <- predict(logit_b, type = "response")
me_ym   <- beta2_b*p_hat
return(ame_ym = mean(me_ym ))
}
# Iterar función y almacenar resultados
nreps = 500
ame_ym_bs <- replicate(nreps,bs_ame_ym() )
beta2
ci95 = round(ci_ame_ym_bs,2)
ci95
ame_ym_bs <- replicate(nreps,bs_ame_ym() )
ame_ym_bs
head(ame_ym_bs)
p_hat   <- predict(logit_affairs_sex_ym, type = "response")
p_hat
margins(logit_affairs_sex_ym)
margins(logit_affairs_sex_ym) %>% summary()
margins(logit_affairs_sex_ym) %>% summary()
beta2
?margins
margins(logit_affairs_sex_ym, vce = c("bootstrap") %>% summary()
)
margins(logit_affairs_sex_ym, vce = c("bootstrap")) %>% summary()
logit_b$coefficients[3]
logit_affairs_sex_ym
data_b  <- sample_n(affairsdata,size=nrow(affairsdata),replace=TRUE)
logit_b <- glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=data_b)
beta2_b <- logit_b$coefficients[3]
beta2_b
p_hat
p_hat   <- predict(logit_b, type = "response")
me_ym   <- beta2_b*p_hat
return(ame_ym = mean(me_ym))
bs_ame_ym  <- function(x) {
data_b  <- sample_n(affairsdata,size=nrow(affairsdata),replace=TRUE)
logit_b <- glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=data_b)
beta2_b <- logit_b$coefficients[3]
p_hat   <- predict(logit_b, type = "response")
me_ym   <- beta2_b*p_hat
return(ame_ym = mean(me_ym))
}
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
bs_ame_ym()
p_hat   <- predict(logit_affairs_sex_ym, type = "response")
beta2
beta2
logit_affairs_sex_ym
p_hat   <- predict(logit_affairs_sex_ym, type = "response")
me_ym   <- beta2*p_hat
mean(me_ym)
ame_ym  <- mean(me_ym); ame_ym
logit_affairs_sex_ym %>% margins()ç
logit_affairs_sex_ym %>% margins()
margins(logit_affairs_sex_ym, vce = c("bootstrap")) %>% summary()
margins(logit_affairs_sex_ym) %>% summary()
######################################### Load data #########################################
library(tidyverse)
library(rsample)
library(modelr) # for data_grid() function
library(carData)
data(SLID)
ourdata <- SLID
ourdata %>% as_tibble()
# remove NAs
ourdata <- ourdata %>% na.omit()
# Look at data
ourdata %>% as_tibble()
# A regression model
our_model <- lm(log(wages) ~ sex + education + language, data=ourdata)
summary_our_model <- summary(our_model); summary_our_model
####################################### Inference via MC #####################################
# parameters
n =  length(our_model$fitted.values)
wage_hat = our_model$fitted.values
sigma = summary_our_model$sigma
nreps = 1000
# function that generates sample from the assumed distribution of the data
our_mc <- function() {
#logwage_m <- wage_hat + rnorm(n,0,sd=sigma) // equivalent to line below
logwage_m <- rnorm(n,mean=wage_hat,sd=sigma)
ourdata_m <- cbind(ourdata,logwage_m)
model_m   <- lm(logwage_m ~ sex + education + language, data=ourdata_m)
coefs_m   <- model_m$coefficients
return(coefs_m)
}
# generate replicates of mc simulation
coefs_mc_dist <- replicate(nreps,our_mc())
# reshape results
coefs_mc_dist <- coefs_mc_dist %>% t() %>% as_tibble()
# Montecarlo distribution of coeffs.
coefs_mc_dist %>% ggplot(aes(x=sexMale)) + geom_density()
# Parameters of montecarlo distribution of coeffs.
beta_sexMale_mc <- mean(coefs_mc_dist$sexMale); beta_sexMale_mc
se_sexMale_mc   <- sd(coefs_mc_dist$sexMale); se_sexMale_mc
# 2 types of confidence intervals
ci_sexMale_q_mc <- quantile(coefs_mc_dist$sexMale,p=c(0.025,0.975)); ci_sexMale_q_mc
ci_sexMale_normap_mc <- c(beta_sexMale_mc-2*se_sexMale_mc,beta_sexMale_mc+2*se_sexMale_mc); ci_sexMale_normap_mc
# Montecarlo distribution of linear or non linear combinarion of parameters.
coefs_mc_dist %>%
ggplot(aes(x=languageOther - languageFrench)) + geom_density()
# estimates with Ci of linear or non linear combinarion of parameters.
coefs_mc_dist %>%
dplyr::summarise(diff=mean(languageOther - languageFrench),
ll=quantile(languageOther - languageFrench,p=0.025),
ul=quantile(languageOther - languageFrench,p=0.975))
# direct computations of quantities of interest
sum(coefs_mc_dist$languageOther > coefs_mc_dist$languageFrench)/length(coefs_mc_dist$languageOther)
coefs_mc_dist <- coefs_mc_dist %>% mutate(wm = exp( `(Intercept)` + sexMale + education*10)) %>%
mutate(ww = exp( `(Intercept)`  + education*10))
coefs_mc_dist %>% mutate(gwg = wm - ww) %>% with(quantile(gwg, p=c(0.025,0.975)))
################################### Inference via Bootstrap ##################################
############ Lowess via bootstrap ############
# creates boostrap samples
boots <- bootstraps(ourdata, times = nreps)
boots
boots$splits[[1]] %>% analysis() %>% as_tibble()
# function to be implemented within each sample (LOWESS)
lowess_fit <- function(split){
lowess(analysis(split)$wages, analysis(split)$education)
}
# look at and plot results within each sample
boots %>%
mutate(lowess_points = map(splits, lowess_fit)) %>%
select(id, lowess_points) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x = x, y = y, color = id)) +
geom_line(alpha = 0.2) +
theme(legend.position = 'none') +
labs(x="education",y="wages")
############ Regression via bootstrap ############
# creates boostrap samples
boots <- bootstraps(ourdata, times = nreps)
boots
boots$splits[[1]] %>% analysis() %>% as_tibble()
# function to implement within each sample (regression model)
lm_fit <- function(split){
model_bs = lm(log(wages) ~ sex + education + language, data=analysis(split))
}
# look at and plot results within each sample
coefs_bs_dist <- boots %>%
mutate(fit = map(splits, lm_fit), estimates=map(fit,tidy)) %>%
select(id,estimates) %>%
unnest()
# Bootstrap distribution of coeffs.
coefs_bs_dist %>%
filter(term=="sexMale") %>%
ggplot(aes(x=estimate)) + geom_density()
# Parameters of bootstrap distribution of coeffs.
beta_sexMale_bs <- coefs_bs_dist %>% filter(term=="sexMale") %>% with(mean(estimate)); beta_sexMale_bs
se_sexMale_bs   <- coefs_bs_dist %>% filter(term=="sexMale") %>% with(sd(estimate)); se_sexMale_bs
ci_sexMale_q_bs <- coefs_bs_dist %>% filter(term=="sexMale") %>%
with(quantile(estimate,p=c(0.025,0.975))); ci_sexMale_q_bs
ci_sexMale_normap_bs <- c(beta_sexMale_bs-2*se_sexMale_bs,beta_sexMale_bs+2*se_sexMale_bs); ci_sexMale_normap_bs
# Estimate of the gender wage gap
coefs_bs_dist %>% select(id,term,estimate) %>%
spread(term,estimate) %>%
mutate(wage_male =   exp(`(Intercept)` + education*mean(ourdata$education) + sexMale)) %>%
mutate(wage_female = exp(`(Intercept)` + education*mean(ourdata$education))) %>%
mutate(gender_gap = wage_male - wage_female) %>%
ggplot(aes(x=gender_gap)) + geom_density()
# a bit more complex case: varying values of education
grid <- ourdata %>% data_grid(sex, education = seq_range(education, 20),.model=our_model)
# function predict from model to new data.
# We then exponentiate outcome because we are interested in predictions in original scale.
predict_new <- function(fit){
preds = predict(fit,newdata=grid) %>% exp()
preds = cbind(grid,preds)
return(preds)
}
# implement bootstrap and manipulate at will
boots %>%
mutate(fit = map(splits, lm_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
select(-language) %>%
group_by(id,education) %>%
arrange(id,education,sex) %>%
mutate(gwg = last(preds) - first(preds)) %>%
filter(sex=="Female") %>% select(-sex) %>%
ungroup() %>% group_by(education) %>%
summarise(gwg_mean =mean(gwg), ll= quantile(gwg,p=0.025),ul = quantile(gwg,p=0.975)) %>%
ggplot(aes(x=education,y=gwg_mean, ymin=ll,ymax=ul)) + geom_ribbon(alpha=0.3) + geom_line()
###################################### Permutation tests #####################################
########## univariate regression ###########
# function that permutes dependent variable
our_perm_1 <- function() {
wages_p   <- sample(ourdata$wages, replace = FALSE)
ourdata_p <- cbind(ourdata,wages_p)
model_p   <- lm(log(wages_p) ~ education, data=ourdata_p)
coefs_p   <- model_p$coefficients
return(coefs_p)
}
# replications
coefs_perm_dist_1 <- replicate(nreps,our_perm_1())
# observed results
beta_educ_obs = our_model$coefficients["education"]
# reshape and plot
coefs_perm_dist_1 <- coefs_perm_dist_1 %>% t() %>% as_tibble()
coefs_perm_dist_1 %>%
ggplot(aes(x=education)) + geom_density() +
geom_vline(xintercept = beta_educ_obs, color = "blue", size=1)
# compute pvalue
p_value_1 = sum(abs(coefs_perm_dist_1$education)>beta_educ_obs)/length(coefs_perm_dist_1)
############### correlation ################
# function that permutes one of the correlated variables
our_perm_2 <- function() {
wages_p    <- sample(ourdata$wages, replace = FALSE)
ourdata_p <- cbind(ourdata,wages_p)
cor_p   <- cor(log(ourdata_p$wages_p), ourdata_p$education)
return(cor_p)
}
# replications
coefs_perm_dist_2 <- replicate(nreps,our_perm_2())
# observed results
cor_educ_obs = cor(log(ourdata$wages), ourdata$education)
# reshape and plot
coefs_perm_dist_2 <- coefs_perm_dist_2 %>% tibble(cor_p=.)
coefs_perm_dist_2 %>%
ggplot(aes(x=cor_p)) + geom_density() +
geom_vline(xintercept = cor_educ_obs, color = "blue", size=1)
# compute pvalue
p_value_2 = sum(abs(coefs_perm_dist_2)>cor_educ_obs)/length(coefs_perm_dist_2)
############### multiple regression 1 ################
# function that suffles dependent variable
# null hypothesis: y is unrelated with every x.
our_perm_3 <- function() {
wages_p    <- sample(ourdata$wages, replace = FALSE)
ourdata_p <- cbind(ourdata,wages_p)
model_p   <- lm(log(wages_p) ~ education + sex + language, data=ourdata_p)
coefs_p   <- model_p$coefficients
return(coefs_p)
}
coefs_perm_dist_3 <- replicate(nreps,our_perm_3())
betas = our_model$coefficients
coefs_perm_dist_3 <- coefs_perm_dist_3 %>% t() %>% as_tibble()
coefs_perm_dist_3 %>% gather(key=variable,value=estimate)  %>%
filter(variable!="(Intercept)") %>%
ggplot(aes(x=estimate, colour=variable)) + geom_density()
############### multiple regression 2 ################
# estimate reduced mode first, then suffle dependent or independent
# null hypothesis: conditional on convariates y and x are not associated.
model_red   <- lm(log(wages) ~ education +  language, data=ourdata)
outcome     <- model_red$residual
our_perm_4 <- function() {
model_red   <- lm(log(wages) ~ education +  language, data=ourdata)
outcome     <- model_red$residual
sex_p       <- sample(ourdata$sex, replace = FALSE)
ourdata_p <- cbind(ourdata,sex_p,outcome)
model_p   <- lm(outcome ~ sex_p, data=ourdata_p)
coefs_p   <- model_p$coefficients
return(coefs_p)
}
coefs_perm_dist_4 <- replicate(nreps,our_perm_4())
# Note: this one is not the right comparison. Need to account for difference in variance between actual outcome (log-wages) and the residual from
# reduce model. Comparing the correlation coeff. instead of the beta should do the work.
beta_sex_obs = our_model$coefficients["sexMale"]
coefs_perm_dist_4 <- coefs_perm_dist_4 %>% t() %>% as_tibble()
coefs_perm_dist_4 %>%
ggplot(aes(x=sex_pMale)) + geom_density() +
geom_vline(xintercept = beta_sex_obs, color = "blue", size=1)
# compute pvalue
p_value_4 = sum(abs(coefs_perm_dist_4)>beta_sex_obs)/length(coefs_perm_dist_4)
##############################################################################################
boots %>%
mutate(fit = map(splits, lm_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
select(-language) %>%
group_by(id,education) %>%
arrange(id,education,sex) %>%
mutate(gwg = last(preds) - first(preds)) %>%
filter(sex=="Female") %>% select(-sex) %>%
ungroup() %>% group_by(education) %>%
summarise(gwg_mean =mean(gwg), ll= quantile(gwg,p=0.025),ul = quantile(gwg,p=0.975)) %>%
ggplot(aes(x=education,y=gwg_mean, ymin=ll,ymax=ul)) + geom_ribbon(alpha=0.3) + geom_line()
logit_affairs_sex_ym
grid <- affairsdata %>% data_grid(sex, ym = seq_range(ym, 20),.model=logit_affairs_sex_ym)
grid
boots <- affairsdata  %>% bootstraps(times = nreps)
grid <- affairsdata %>% data_grid(sex, ym = seq_range(ym, 20),.model=logit_affairs_sex_ym)
predict_new <- function(fit){
preds = predict(fit,newdata=grid, type = "response")
preds = cbind(grid,preds)
return(preds)
}
boots
boots <- affairsdata  %>% bootstraps(times = nreps) %>%
mutate(fit_p = map(splits, logit_fit))
# function to implement within each sample (regression model)
logit_fit <- function(split){
model_bs = glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=analysis(split))
}
boots <- affairsdata  %>% bootstraps(times = nreps)
grid <- affairsdata %>% data_grid(sex, ym = seq_range(ym, 20),.model=logit_affairs_sex_ym)
predict_new <- function(fit){
preds = predict(fit,newdata=grid, type = "response")
preds = cbind(grid,preds)
return(preds)
}
boots %>%
mutate(fit = map(splits, lm_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame)
logit_fit <- function(split){
model_bs = glm(everaffair_d ~ factor(sex) + ym, family=binomial(link="logit"), data=analysis(split))
}
boots <- affairsdata  %>% bootstraps(times = nreps)
grid <- affairsdata %>% data_grid(sex, ym = seq_range(ym, 20),.model=logit_affairs_sex_ym)
predict_new <- function(fit){
preds = predict(fit,newdata=grid, type = "response")
preds = cbind(grid,preds)
return(preds)
}
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame)
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest()
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=sex, colour=sex)) + geom_line(alpha=0.1)
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest()
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.1)
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.1) +
scale_color_viridis_d()  +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none")
seq_range(0,75)
seq(0,75,1)
grid <- affairsdata %>% data_grid(sex, ym = seq(0,75,1),.model=logit_affairs_sex_ym)
predict_new <- function(fit){
preds = predict(fit,newdata=grid, type = "response")
preds = cbind(grid,preds)
return(preds)
}
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.1) +
scale_color_viridis_d()  +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none") +
labs(x="years of marriage", y="p")
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.1) +
scale_color_viridis_d()  +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none") +
labs(x="years of marriage", y="p")
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.02) +
scale_color_viridis_d()  +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none") +
labs(x="years of marriage", y="p")
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.05) +
scale_color_viridis_d()  +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none") +
labs(x="years of marriage", y="p")
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.08) +
scale_color_viridis_d()  +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none") +
labs(x="years of marriage", y="p")
grid <- affairsdata %>% data_grid(sex, ym = seq_range(ym,20),.model=logit_affairs_sex_ym)
predict_new <- function(fit){
preds = predict(fit,newdata=grid, type = "response")
preds = cbind(grid,preds)
return(preds)
}
boots %>%
mutate(fit = map(splits, logit_fit)) %>%
mutate(newpred = map(fit,predict_new)) %>%
select(id,newpred) %>%
mutate_if(is.list, map, as_data_frame) %>%
unnest() %>%
ggplot(aes(x=ym,y=preds, group=interaction(id,sex), colour=sex)) + geom_line(alpha=0.08) +
scale_color_viridis_d()  +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none") +
labs(x="years of marriage", y="p")
