theta_downward=m2$coefficients["sk1"]-theta,
theta_upward=m3$coefficients["sk1"]-theta)
estimates <- rbind(estimates,betas)
}
}
colnames(estimates) <- c(paste("Effect of",expression(W[t-1])),
paste("Effect of",expression(A)),
paste("Cor(",expression(W[t-1]),",",expression(Y[t]),")"),
paste("Cor(",expression(A[t-1]),",",expression(Y[t]),")"),
paste("Adjusting for",expression(SC[t-1])),
paste("Adjusting for",expression(Y[t-1])),
paste("Not adjusting for",expression(Y[t-1])))
rwb <- colorRampPalette(c(pal_aaas("lanonc")(2)[2], "white", pal_aaas("lanonc")(2)[1]))
bias1 <- estimates %>% as_tibble() %>% select(-1,-2) %>%
pivot_longer(-c(corw0y1,cora0y1), names_to = "models", values_to = "estimate") %>%
ggplot(aes(x=corw0y1, y=cora0y1, fill = estimate))  +
facet_grid(. ~  models) +
labs(x=expression(paste("Cor(",W[t-1],",",Y[t],")")),y=expression(paste("Cor(",A[t-1],",",Y[t],")")),fill=expression(hat(theta)-theta)) +
geom_raster(interpolate=TRUE) +
scale_fill_gradientn(colors = rwb(200), lim=c(-0.25,0.25)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
estimates <- NULL
theta=0.2
n=20^3
for (beta in seq(0,2,by=0.01)) {
for (delta in seq(0,2,by=0.01)) {
a0  <- rnorm(n,0,1)
sk0 <- rnorm(n,0,1)
y0  <- rnorm(n,sk0*0.2 + a0*delta,1)
w0  <- rnorm(n,sk0*0.2,1)
a1  <- rnorm(n,0.5*a0,1)
sk1 <- rnorm(n,sk0*0.6,1)
x1  <- rnorm(n,0,1)
y1 <-  rnorm(n,sk1*theta + 0.1*x1 + a1*delta + y0*0.3 + w0*beta,1)
# If it were possibly to control for parent's skin color the relation would be causal
m1 <- lm(y1 ~ sk1 + sk0)
# Controlling for y0 (a collider) induced downward bias
m2 <- lm(y1 ~ sk1 + y0)
# Not controlling for y0 (a confounder) induced upward bias
m3 <- lm(y1 ~ sk1)
betas <-  c(betas=beta, deltas=delta, corw0y1=round(cor(w0,y1),2), cora0y1=round(cor(a0,y1),2), theta_unbiased=(m1$coefficients["sk1"]/theta)-1,
theta_downward=(m2$coefficients["sk1"]/theta)-1,
theta_upward=(m3$coefficients["sk1"]/theta)-1)
estimates <- rbind(estimates,betas)
}
}
xaringan:::inf_mr()
coins200 <- rbinom(10000, size=200, p=0.5)
coins200
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
coins200
mean(coins200)
var(coins200)
hist(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
mean(coins200)
diff <- mean(coins200)-100
mean(coins200)-100
diff=1
while ( diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- mean(coins200)-100
}
diff
diff=1
while ( diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- asb(mean(coins200)-100)
}
diff
diff=1
while ( diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- abs(mean(coins200)-100)
}
diff
abs(mean(coins200)-100)
diff=0
while (diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- abs(mean(coins200)-100)
}
diff
mean(coins200)
var(coins200)
diff=0
while (diff<=0.00001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- abs(mean(coins200)-100)
}
mean(coins200)
var(coins200)
n=100
p=0.5
a_sample <- rbinom(n,size=1,prob=p)
a_sample
sum(a_sample)
sum(a_sample)/n
mi_mle = sum(a_sample)/n
mi_mle
p_hat_n = NULL
for (i in 1:1000) {
a_sample <- rbinom(n,size=1,prob=p)
p_hat_n[i] <- mean(a_sample)
}
p_hat_n
mean(p_hat_n)
mi_mle
mean(p_hat_n)
mi_mle
p_hat = sum(a_sample)/n
sd_pha = sqrt((p_hat*(1-p_hat))/n)
sd_pha
p_hat
sd_pha
p_hat_n = NULL
for (i in 1:1000) {
a_sample <- rbinom(n,size=1,prob=p)
p_hat_n[i] <- mean(a_sample)
}
mean(p_hat_n)
p_hat_n
sd(p_hat_n)
sd_pha
install.packages("reprex")
xaringan:::inf_mr()
tinytex::reinstall_tinytex()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
n <- 5000 # observaciones
n
x <- sample(1:100,n,replace=TRUE) # variable independiente continua
x
n
head(x)
sigma <- 7
b_0 <- 10
b_1 <- 1.1
y_hat = b_0 + b1*x
y_hat %>% glimpse()
y <- rnorm(n,y_hat,sigma)
hist(y)
n <- 20 # observaciones
x <- sample(1:100,n,replace=TRUE) # variable independiente continua
x
d <- sample(0:1,n,replace = TRUE) # dicotómica
d
sigma <- 3 # sd
b_0 <- 10  # intercepto
b_1 <- 3.3  # coeficiente de variable continua ln(x)
b_2 <- 2.1  # coeficiente de variable dummy d
b_3 <- 0.7 # coeficiente interacción ln(x)*d
mu <- b_0 + b_1*I(log(x)) + b_2*d + b_3*I(log(x))*d   # valor predicho
sigma <- 3 # sd
y <- mu + rnorm(n,0,sigma)
glimpse(y)
our_data2 <- tibble(y=y, x=x, d=d)
our_lm_ols2 <- lm(y ~ I(log(x))*factor(d), data=our_data2) # "fit" el modelo usando función lm()
print(summary(our_lm_ols2)) # analicemos nuestros resultados
set.seed("87742") # seed
n <- 20000 # observaciones
x <- sample(1:100,n,replace=TRUE) # variable independiente continua
d <- sample(0:1,n,replace = TRUE) # dicotómica
sigma <- 3 # sd
b_0 <- 10  # intercepto
b_1 <- 3.3  # coeficiente de variable continua ln(x)
b_2 <- 2.1  # coeficiente de variable dummy d
b_3 <- 0.7 # coeficiente interacción ln(x)*d
mu <- b_0 + b_1*I(log(x)) + b_2*d + b_3*I(log(x))*d   # valor predicho
y <- mu + rnorm(n,0,sigma)
our_data2 <- tibble(y=y, x=x, d=d)
our_lm_ols2 <- lm(y ~ I(log(x))*factor(d), data=our_data2) # "fit" el modelo usando función lm()
print(summary(our_lm_ols2)) # analicemos nuestros resultados
new_x = our_data2 %>% data_grid(x=c(5,50),d,.model=our_lm_ols2)
new_y = predict(our_lm_ols2, newdata = new_x)
positions_v <- data.frame(x1 = new_x$x, x2 = new_x$x, y1 = c(0,0,0,0), y2 = new_y)
positions_h <- data.frame(x1 = c(0,0,0,0), x2 = new_x$x, y1 =  new_y, y2 =  new_y)
plot <- our_data2 %>% ggplot(aes(x=x, y=y, group=factor(d), colour=factor(d))) + geom_point(size=2.5, alpha=0.1) +
scale_color_viridis_d()  + geom_smooth(method='lm', formula= y ~ log(x), size=1.5)
plot +  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, group=1,color=""), data = positions_v) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, group=1,color=""), data = positions_h) +
annotate(geom="text", x=20, y=15.33800, label='bold("(x=5,y=15.3)")', color="black", parse=TRUE, size=6) +
annotate(geom="text", x=20, y=18.47949, label='bold("(x=5,y=18.5)")', color="black", parse=TRUE, size=6) +
annotate(geom="text", x=65, y=22.89769, label='bold("(x=50,y=22.9)")', color="black", parse=TRUE, size=6) +
annotate(geom="text", x=65, y=27.70367, label='bold("(x=50,y=27.7)")', color="black", parse=TRUE, size=6) +
guides(fill=FALSE, color=FALSE) +
theme(axis.text.y = element_text(size = 22), axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 24), axis.title.x = element_text(size = 24),
legend.text = element_text(size = 18), legend.position="none")
x <- rnunif(1000)
x <- runif(1000)
rnorm(log(x)) + min(x)
y <- rnorm(log(x)) + abs(min(x))
y
y <- rnorm(log(x)) - min(x)
y
abs(min(x))
x <- runif(1000)
y <- rnorm(log(x)) + abs(min(x))
y
x <- runif(1000)
y <- round(rnorm(log(x)),0)
x <- runif(1000)
y <- round(2*rnorm(log(x)),0)
x <- runif(1000)
y <- round(rnorm(log(2*x)),0)
y
x <- runif(1000)
y <- round(rnorm(log(2*x)),0)
y <- y + min(y)
y
x <- runif(1000)
y <- round(rnorm(log(2*x)),0)
y <- y + abs(min(y))
y
x <- runif(1000)
y <- round(rnorm(log(2*x)),0)
y <- y + abs(min(y))
fams = c("gamma")
links = c("log")
glm(y ~ x, family = fams[1], link = links[1]  )
x <- runif(1000)
y <- round(rnorm(log(2*x)),0)
y <- y + abs(min(y)) + 1
fams = c("gamma")
links = c("log")
glm(y ~ x, family = fams[1], link = links[1]  )
y
glm(y ~ x, family = fams[1], link = links[1]  )
fams[1]
glm(y ~ x, family = "gamma", link = links[1]  )
glm(y ~ x, family = "gamma", link = links[1]  )
?
glm
glm(y ~ x, family = "gamma", link = "log"  )
glm(y ~ x, family = "gamma")
glm(y ~ x, family = "gamma()")
glm(y ~ x, family = gamma())
fams = c("binomial")
links = c("log")
glm(y ~ x, family = "gamma", link = "log"  )
glm(y ~ x, family = binomial(link = "logit"), link = "log"  )
glm(y ~ x, family = binomial(link = "logit")  )
glm(y ~ x, family = gamma  )
glm(y ~ x, family = "gamma"  )
glm(y ~ x, family = "gamma"  )
glm(y ~ x, family = gamma  )
glm(y ~ x, family = gamma()  )
glm(y ~ x, family = Gamma()  )
glm(y ~ x, family = "Gamma"  )
glm(y ~ x, family = "Gamma", link="log"  )
glm(y ~ x, family = "Gamma", link="log"  )
data_casen_csv %>%
summarise(across(c("sexo","edad"),mean))
# Carga datos
library("readr")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/repo/slides/class_5/")
# leer archivo csv
data_casen_csv <- read_csv("sample_casen2017.csv")
library(tidyverse)
data_casen_csv %>%
summarise(across(c("sexo","edad"),mean))
data_casen_csv <- read_csv("sample_casen2017.csv")
# Carga datos
library("readr")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/repo/slides/class_5/")
# leer archivo csv
data_casen_csv <- read_csv("sample_casen2017.csv")
# Carga datos
library("readr")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2021_2_data_analysis_r/repo/slides/class_5/")
# leer archivo csv
data_casen_csv <- read_csv("sample_casen2017.csv")
data_casen_csv %>%
summarise(across(c("sexo","edad"),mean))
data_casen_csv %>%
summarise(across( 2:4 , mean))
data_casen_csv %>%
summarise(across(starts_with("y"), mean))
data_casen_csv %>%
summarise(across(starts_with("y"), ~ mean(.x, na.rm = TRUE) ))
data_casen_csv %>%
summarise(across(starts_with("y"), ~ mean(.x, na.rm = TRUE) ))
data_casen_csv %>%
summarise(across(contains("ed"), ~mean(.x, na.rm = TRUE) ))
data_casen_csv %>%
summarise(across(edad, list(media = mean, mediana = median)))
data_casen_csv %>%
summarise(across(ytrabajocor, list(media =  ~mean(.x, na.rm = TRUE), mediana = ~median(.x, na.rm = TRUE))))
data_casen_csv %>%
summarise(across(c("edad","ytrabajocor"), list(average =  ~mean(.x, na.rm = TRUE), q50 = ~median(.x, na.rm = TRUE))))
data_casen_csv %>%
summarise(across(starts_with("y"), list(media = ~mean(.x, na.rm = TRUE), mediana= ~median(.x, na.rm = TRUE)) ))
data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores"))
data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores")) %>%
group_by(region, sexo, edad_cat)
mitabla <- data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores")) %>%
group_by(region, sexo, edad_cat) %>%
summarise(mean_ytotcor = mean(ytotcor, na.rm = T),
median_ytotcor = median(ytotcor, na.rm = T)) %>%
mutate(ratio = mean_ytotcor/median_ytotcor) %>%
arrange(desc(ratio))
mitabla
mitabla <- data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores")) %>%
group_by(region, sexo, edad_cat) %>%
summarise(mean_ytotcor = mean(ytotcor, na.rm = T),
median_ytotcor = median(ytotcor, na.rm = T)) %>%
mutate(ratio = mean_ytotcor/median_ytotcor) %>%
arrange(desc(ratio))
mitabla
mitabla  %>% ggplot(aes(x=mean_ytotcor,y=median_ytotcor)) + geom_point()
data_casen_csv %>%
group_by(region, sexo) %>%
summarise(across(ytrabajocor, list(media =  ~mean(.x, na.rm = TRUE), mediana = ~median(.x, na.rm = TRUE))))
data_casen_csv %>%
group_by(region, sexo) %>%
summarise(across(starts_with("y"), list(media =  ~mean(.x, na.rm = TRUE), mediana = ~median(.x, na.rm = TRUE))))
data_a <- data_casen_csv %>% filter(region <2 | region>=15 ) %>%
group_by(region) %>%
summarise(across(edad, mean)); data_a
data_b <- data_casen_csv %>% filter(region <3 | region>=16 ) %>%
group_by(region) %>%
summarise(across(c(edad,yautcorh), mean)); data_b
data_a
data_b
data_a   %>% inner_join(data_b, by="region")
data_a   %>% inner_join(data_b, by="region")
data_b   %>% inner_join(data_a, by="region")
data_b %>% select(!edad)
data_a %>% inner_join(data_b %>% select(!edad), by="region")
data_a %>% select(!edad) %>% inner_join(data_b, by="region")
data_a
data_b
data_a %>% left_join(data_b  %>% select(!edad), by="region")
data_a  %>% right_join(data_b %>% select(!edad), by="region")
data_a  %>% full_join(data_b %>% select(!edad), by="region")
data_a  %>% full_join(data_b, by="region")
data_a  %>% full_join(data_b, by="region")
data_a  %>% full_join(data_b, by="region") %>%
mutate(edad = if_else(is.na(edad.x),edad.y,edad.x))
data_a  %>% full_join(data_b, by="region") %>%
mutate(edad = if_else(is.na(edad.x),edad.y,edad.x)) %>%
select(!c(edad.x,edad.y))
data_a  %>% full_join(data_b, by="region")
data_a  %>% full_join(data_b, by="region") %>%
mutate(edad = max(edad.x, edad.y, na.rm = T))
data_a  %>% full_join(data_b, by="region") %>%
rowwise() %>%
mutate(edad = max(edad.x, edad.y, na.rm = T))
data_casen_csv %>%
select(region,sexo,yautcorh)
gini_regsex <- data_casen_csv %>%
group_by(region,sexo) %>%
summarise(gini = Gini(yautcorh, na.rm = T )); gini_regsex
library("ineq")
gini_regsex <- data_casen_csv %>%
group_by(region,sexo) %>%
summarise(gini = Gini(yautcorh, na.rm = T )); gini_regsex
mitabla
mitabla
data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores"))
data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores")) %>%
left_join(mitabla, by=c("region","sexo", "edad_cat"))
data_casen_csv %>%
mutate(edad_cat = case_when(edad <= 18 ~ "menores",
edad >18 & edad<=65 ~ "adultos",
edad > 65  ~ "adultos mayores")) %>%
left_join(mitabla, by=c("region","sexo", "edad_cat")) %>%
select(region,sexo,mean_ytotcor, median_ytotcor, ratio)
x <- runif(1000)
y <- round(rnorm(log(2*x)),0)
y <- y + abs(min(y)) + 1
fams = c("Gamma")
links = c("log")
glm(y ~ x, family = fams[1])
