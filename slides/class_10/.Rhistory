class(logit_affairs_sex_ym$model$everaffair_d)
confusionMatrix(factor(y_hat),logit_affairs_sex_ym$model$everaffair_d)
confusionMatrix(factor(y_hat),factor(logit_affairs_sex_ym$model$everaffair_d))
confusionMatrix(factor(y_hat),factor(logit_affairs_sex_ym$model$everaffair_d), dnn = c("Prediction", "True value"))
conf_mat$overall
conf_mat$overall
conf_mat$positive
conf_mat$byClass
\begin{align}
f_{Y}(y) =
\begin{cases}
\frac{1}{36}  & \quad \text{si } y=2 \text{ o } y=12\\
\frac{2}{36}  & \quad \text{si } y=3 \text{ o } y=11\\
\frac{3}{36}  & \quad \text{si } y=4 \text{ o } y=10\\
\frac{4}{36}  & \quad \text{si } y=5 \text{ o } y=9\\
\frac{5}{36}  & \quad \text{si } y=6 \text{ o } y=8\\
\frac{6}{36}  & \quad \text{si } y=7 \\
0             & \quad \text{otherwise}
\end{cases}
\end{align}
\begin{align}
\hat{y}_{i}=
\begin{cases}
1,  \quad \hat{p}_{i} > 1/2 \\ \\
0,  \quad \hat{p}_{i} < 1/2
\end{cases}
\end{align}
log(0.1)
log(0.12)
log(0.01)
log(1)
-2 * log(0.1) + 4
-2 * log(0.1) + 5
-2 * log(0.1) + 4
-2 * log(0.2) + 4
-2 * log(0) + 4
exp(2)
ln(7)
log(7)
xaringan:::inf_mr()
logit_affairs_sex_ym0$rank
AIC(logit_affairs_sex_ym0,logit_affairs_sex_ymÂº)
AIC(logit_affairs_sex_ym0,logit_affairs_sex_ym1)
AIC0 <- -2*logLik(logit_affairs_sex_ym0) + 2*logit_affairs_sex_ym0$rank
BIC0 <- -2*logLik(logit_affairs_sex_ym0) + ln(logit_affairs_sex_ym0$fitted.values)*logit_affairs_sex_ym0$rank
BIC0 <- -2*logLik(logit_affairs_sex_ym0) + log(logit_affairs_sex_ym0$fitted.values)*logit_affairs_sex_ym0$rank
BIC0
BIC0 <- -2*logLik(logit_affairs_sex_ym0) + log(length(logit_affairs_sex_ym0$fitted.values))*logit_affairs_sex_ym0$rank
BIC0
BIC(logit_affairs_sex_ym0)
inf_crit <- function(m) {
aic = 2*logLik(m)[1] + 2*m$rank
bic = 2*logLik(m)[1] + log(length(m$fitted.values))*m$rank
return(c(AIC=aic,BIC=bic))
}
xaringan:::inf_mr()
xaringan:::inf_mr()
trainIndex <- createDataPartition(affairsdata$everaffair_d, p = .7,
list = FALSE,
times = 1)
trainIndex
affairsdata$everaffair_d
trainIndex
?createDataPartition
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
ctrl
mod_fit <- train(everaffair_d ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
levels(affairsdata$everaffair_d)
subdata <- affairsdata %>% select(everaffair_d,sexo,ym,child,rate) %>% complete.cases()
subdata <- affairsdata %>% dplyr::select(everaffair_d,sexo,ym,child,rate) %>% complete.cases()
subdata <- affairsdata %>% dplyr::select(everaffair_d,sex,ym,child,rate) %>% complete.cases()
subdata
subdata <- affairsdata %>% dplyr::select(everaffair_d,sex,ym,child,rate) %>% with(complete.cases())
subdata <- affairsdata %>% dplyr::select(everaffair_d,sex,ym,child,rate) %>% na.omit()
subdata
subdata <- affairsdata %>% dplyr::select(everaffair_d,sex,ym,child,rate) %>% na.omit()
mod_fit <- train(everaffair_d ~ ym + factor(child) + rate,  data=subdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
subdata <- affairsdata %>% dplyr::select(everaffair_d,sex,ym,child,rate) %>% na.omit()
mod_fit <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=subdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
mod_fit
pred = predict(mod_fit, newdata=testing)
confusionMatrix(data=pred, testing$Class)
train_control <- trainControl(method="cv", number=10, savePredictions = TRUE)
mod_fit$pred
mod_fit$coefnames
logit_affairs_sex_ym0 <- train(everaffair_d ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
logit_affairs_sex_ym0
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
subdata <- affairsdata %>% dplyr::select(everaffair_d,sex,ym,child,rate) %>% na.omit()
logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
logit_affairs_sex_ym1 <- train(eeveraffair_d ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
logit_affairs_sex_ym0
logit_affairs_sex_ym1
logit_affairs_sex_ym1 <- train(eeveraffair_d ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
subdata <- affairsdata %>% dplyr::select(everaffair_d,sex,ym,child,rate) %>% na.omit()
logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5)
logit_affairs_sex_ym0
logit_affairs_sex_ym1
logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5, metric = "Accuracy")
logit_affairs_sex_ym0
logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5, metric = "Accua")
logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, tuneLength = 5, metric = "Accuracy")
?resamples
resamples(list(glm = c(logit_affairs_sex_ym0,logit_affairs_sex_ym1)))
resamples(list(glm = logit_affairs_sex_ym0, glm = logit_affairs_sex_ym1 ))
resamps <- resamples(list(glm = logit_affairs_sex_ym0, glm = logit_affairs_sex_ym1 ))
summary(resamps)
ggplot(logit_affairs_sex_ym1)
?train
logit_affairs_sex_ym0$pred
cv_logit_affairs_sex_ym0
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null
cv_logit_affairs_sex_ym0
cv_logit_affairs_sex_ym1
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
cv_logit_affairs_null <- train(factor(everaffair_d) ~ 1,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null
cv_logit_affairs_null
cv_logit_affairs_null <- train(factor(everaffair_d) ~ 1,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null <- train(factor(everaffair_d) ~ factor(1),  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null <- train(factor(everaffair_d) ~ . ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null
use warnings()
cv_logit_affairs_null <- train(factor(everaffair_d) ~ .ym ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ym ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_null
cv_logit_affairs_sex_ym0
cv_logit_affairs_sex_ym1
confusionMatrix(cv_logit_affairs_sex_ym0)
confusionMatrix(cv_logit_affairs_sex_ym1)
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ym ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
confusionMatrix(cv_logit_affairs_sex_ym1)
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ym ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ ym*rate + I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
confusionMatrix(cv_logit_affairs_sex_ym1)
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ym ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ factor(sex)*ym*rate +  factor(sex)*I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
confusionMatrix(cv_logit_affairs_sex_ym1)
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
cv_logit_affairs_null <- train(factor(everaffair_d) ~ ym ,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl, metric = "Accuracy")
cv_logit_affairs_sex_ym0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
cv_logit_affairs_sex_ym1 <- train(factor(everaffair_d) ~ factor(child)*ym*rate +  factor(child)*I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial",
trControl = ctrl)
cv_logit_affairs_sex_ym1
confusionMatrix(cv_logit_affairs_sex_ym1)
?confusionMatrix
a <- confusionMatrix(cv_logit_affairs_sex_ym0)
a
a$table
a$table
a$B
a$norm
a$text
summary(a)
a
names(a)
names$table
$table
a$table
a$norm
a$B
a$text
print(a)
a[-"text"]
a[-text]
a[,-text]
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
ctrl <- trainControl(method = "repeatedcv", number = 10, savePredictions = TRUE)
ctrl
cv_logit_affairs0 <- train(factor(everaffair_d) ~ ym + factor(child) + rate,  data=affairsdata, method="glm", family="binomial", trControl = ctrl)
cv_logit_affairs0
cv_logit_affairs0$pred
cv_logit_affairs1 <- train(factor(everaffair_d) ~ factor(child)*ym*rate +  factor(child)*I(ym^2)*rate,  data=affairsdata, method="glm", family="binomial", trControl = ctrl)
confusionMatrix(cv_logit_affairs0)
xaringan:::inf_mr()
xaringan:::inf_mr()
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
## Bases de datos ordenadas ("tidy")
library("tidyverse")
library("janitor")
library("readr")
setwd("/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/repo/slides/class_10/")
va_messy <-read.delim("value_added_agricultue.csv", sep= ";")
va_messy
va_messy %>% View()
va_messy %>% row_to_names(row_number = 1)
va_messy %>% row_to_names(row_number = 1) %>% View()
va_messy %>% row_to_names(row_number = 1) %>% View()
va_messy %>% row_to_names(row_number = 1) %>% View()
rename(country = 1)
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>% View()
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
pivot_longer(cols = -c("country"))
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x)))
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>% View()
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>% View()
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value")
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>%
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value")
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>%
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value") %>% View()
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>%
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value") %>%
mutate(added_value = if_else(added_value == "", NA_character_, added_value))
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>%
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value") %>%
mutate(added_value = if_else(added_value == "", NA_character_, added_value)) %>%
drop_na(added_value)
va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>%
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value") %>%
mutate(added_value = if_else(added_value == "", NA_character_, added_value)) %>%
drop_na(added_value) %>%
arrange(year,country)
va_data <- va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>%
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value") %>%
mutate(added_value = if_else(added_value == "", NA_character_, added_value)) %>%
drop_na(added_value) %>%
arrange(year,country)
va_data  %>% View()
va_messy
va_messy %>% View()
va_data
va_data %>% complete(country,year)
va_data %>% complete(country,year, fill = list(added_value = "Missing"))
va_data %>% complete(country,year, fill = list(added_value = 0))
va_data %>% complete(country,year, fill = list(added_value = 0)) %>%
mutate(added_value = as.character(added_value))
va_data %>% complete(country,year, fill = list(added_value = 0)) %>%
mutate(added_value = as.numeric(added_value))
as.numeric("23")
"23" + 1
as.numeric("23") + 1
as.numeric("hola") + 1
as.numeric("23.1") + 1
as.numeric("23,1") + 1
complete(country,year, fill = list(added_value = 0)) %>%
separate(added_value, sep=",", into=c("entero","decimal"))
va_data %>% complete(country,year, fill = list(added_value = 0)) %>%
separate(added_value, sep=",", into=c("entero","decimal"))
va_data
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal"))
va_data
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal"))
va_data %>% View()
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>% View()
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>% filter(1488)
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>% View()
?unite
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>%
unite("added_value", c("entero","decimal"), sep = ".")
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>%
unite("added_value", c("entero","decimal"), sep = ".") %>%
mutate(added_value = as.numeric(added_value))
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>%
unite("added_value", c("entero","decimal"), sep = ".") %>%
mutate(added_value = as.numeric(added_value)) %>%
complete(country,year, fill = list(added_value = 0))
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>%
unite("added_value", c("entero","decimal"), sep = ".") %>%
mutate(added_value = as.numeric(added_value)) %>%
complete(country,year, fill = list(added_value = 0))  %>%
mutate(country = as.numeric(country))
va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>%
unite("added_value", c("entero","decimal"), sep = ".") %>%
mutate(added_value = as.numeric(added_value)) %>%
complete(country,year, fill = list(added_value = 0))  %>%
mutate(year = as.numeric(year))
va_data %>% arrange(country,year)
va_data  <- va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>%
unite("added_value", c("entero","decimal"), sep = ".") %>%
mutate(added_value = as.numeric(added_value)) %>%
complete(country,year, fill = list(added_value = 0))  %>%
mutate(year = as.numeric(year))
va_data %>% arrange(country,year)
va_data %>% arrange(country,year) %>%
complete(country,year)
va_data %>% arrange(country,year) %>%
filter(country=="Austria", year > 1913)
va_data %>% arrange(country,year) %>%
filter(country=="Austria", year > 1913) %>%
fill(added_value, .direction = c("down"))
va_data <- va_messy %>% row_to_names(row_number = 1) %>%
rename(country = 1) %>%
mutate(across(`1800`:`1938`, ~ as.character(.x))) %>%
pivot_longer(cols = -c("country"), names_to = "year", values_to = "added_value") %>%
mutate(added_value = if_else(added_value == "", NA_character_, added_value)) %>%
drop_na(added_value) %>%
arrange(year,country)
va_data
va_data  <- va_data %>%
separate(added_value, sep=",", into=c("entero","decimal")) %>%
replace_na(list(decimal = 0))  %>%
unite("added_value", c("entero","decimal"), sep = ".") %>%
mutate(added_value = as.numeric(added_value)) %>%
complete(country,year)  %>%
mutate(year = as.numeric(year))
va_data %>% arrange(country,year) %>%
filter(country=="Austria", year > 1913)
va_data %>% arrange(country,year) %>%
filter(country=="Austria", year > 1913) %>%
fill(added_value, .direction = c("down"))
va_data %>% complete(country,year) %>%
filter(country=="Austria", year > 1913) %>%
fill(added_value, .direction = c("up"))
va_data %>% complete(country,year) %>%
filter( (country=="Argentina" & year > 1934) | (country=="Australia" & year < 1804))
va_data %>% complete(country,year) %>%
filter( (country=="Argentina" & year > 1934) | (country=="Australia" & year < 1804)) %>%
fill(added_value, .direction = c("down"))
va_data %>% complete(country,year) %>%
filter( (country=="Argentina" & year > 1934) | (country=="Australia" & year < 1804)) %>%
group_by(country)
va_data %>% complete(country,year) %>%
filter( (country=="Argentina" & year > 1934) | (country=="Australia" & year < 1804)) %>%
group_by(country) %>%
fill(added_value, .direction = c("down"))
va_data %>%
group_by(country)
va_data %>%
group_by(country) %>%
fill(added_value, .direction = c("down"))
va_data %>%
group_by(country) %>%
fill(added_value, .direction = c("down"))  %>% View()
va_data %>%
filter(country=="Austria", year > 1913)
sample(1:32,23)
sample(1:32,23)
sample(1:32,23)
sample(1:32,23)
sample(1:32,23)
sample(1:32,23)
sample(1:32,23)
sample(1:32,23)
va_data %>%
filter(country=="Austria", year > 1913) %>%
mutate(y = c(NA,NA,sample(1:32,23)))
dummy_data <- va_data %>%
filter(country=="Austria", year > 1913) %>%
mutate(y = c(NA,NA,sample(1:32,23)))
dummy_data
dummy_data %>% drop_na()
va_data %>%
filter(country=="Austria", year > 1913) %>%
mutate(y = c(NA,NA,sample(1:32,23))) %>%
mutate(z = c(sample(1:32,23),NA,NA))
View(dummy_data)
dummy_data <- va_data %>%
filter(country=="Austria", year > 1913) %>%
mutate(y = c(NA,NA,sample(1:32,23))) %>%
mutate(z = c(sample(1:32,23),NA,NA))
View(dummy_data)
dummy_data %>% drop_na()
dummy_data %>% drop_na(added_value)
dummy_data %>% drop_na(c("added_value","z"))
dummy_data %>% drop_na(ends_with("y"))
dummy_data %>% drop_na(starts_with("y"))
dummy_data
dummy_data %>%
replace_na(list(country = "Hola",
added_value = 0,
y = 999)) %>% View()
dummy_data %>% drop_na()
dummy_data
dummy_data %>% filter(across(y:z), ~is.na(.x) )
dummy_data %>% filter(across(starts_with("y"), ~ (.x %% 2) == 0))
dummy_data %>% filter(across(starts_with("y"), ~ is.na(.x) == TRUE))
dummy_data %>% filter(across(everything(), ~ is.na(.x) == TRUE))
dummy_data %>% filter(across(c(added_value), ~ is.na(.x) == TRUE))
dummy_data %>% filter(across(everything(), ~ is.na(.x) == TRUE))
dummy_data %>% filter(across(any_vars(), ~ is.na(.x) == TRUE))
dummy_data %>% any_vars(is.na(.))
dummy_data %>% filter(any_vars(is.na(.)))
dummy_data %>% pivot_longer(everything())
dummy_data
dummy_data %>% pivot_longer(cols = everything())
dummy_data %>% pivot_longer(cols = -c(country,year) )
dummy_data %>% pivot_longer(cols = -c(country,year) ) %>%
drop_na(value)
dummy_data %>% pivot_longer(cols = -c(country,year) ) %>%
drop_na(value) %>%
pivot_wider(names_from = name, values_from = value)
dummy_data %>% pivot_longer(cols = -c(country,year) ) %>%
drop_na(value)
dummy_data %>% pivot_longer(cols = -c(country,year) ) %>%
drop_na(value) %>%
pivot_wider(names_from = name, values_from = value)
dummy_data %>% pivot_longer(cols = -c(country,year) ) %>%
filter(is.na(value)==TRUE)
dummy_data %>% pivot_longer(cols = -c(country,year) ) %>%
filter(is.na(value)==TRUE) %>%
pivot_wider(names_from = name, values_from)
dummy_data %>% pivot_longer(cols = -c(country,year) ) %>%
filter(is.na(value)==TRUE) %>%
pivot_wider(names_from = name, values_from=value)
