setwd("/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_categorical_data_analysis/repo/homework/t_1")
write_csv(data_paper, "data_t_1.csv")
lpm_1 <- lm(1*(fair=="Fair") ~ T*winner_game, data=data_paper)
summary(lpm_1)
data_paper <- read_csv("data_t_1.csv")
lpm_1 <- lm(1*(fair=="Fair") ~ T*winner_game, data=data_paper)
summary(lpm_1)
data <- data_paper %>%  filter(treatment!="PR1" & treatment!="PR2")
write_csv(data, "data_t_1.csv")
data_paper <- read_csv("data_t_1.csv")
lpm_1 <- lm(1*(fair=="Fair") ~ T*winner_game, data=data_paper)
summary(lpm_1)
lpm_2 <- lm(1*(fair=="Fair") ~ T*winner_game + age, data=data_paper)
data_paper <- read_csv("data_t_1.csv")
lpm_1 <- lm(1*(fair=="Fair") ~ T*winner_game, data=data_paper)
summary(lpm_1)
lpm_2 <- lm(1*(fair=="Fair") ~ T*winner_game + age, data=data_paper)
summary(lpm_2)
logit_1 <- glm(1*(fair=="Fair") ~ T*winner_game, family = binomial(link=logit), data=data_paper)
summary(logit_1)
summary(lpm_1)
summary(lpm_1)$coefficients[1]
xaringan:::inf_mr()
lpm_2 <- lm(1*(fair=="Fair") ~ T*winner_game + age, data=data_paper)
summary(lpm_2)
0.194690 - 0.247604 + 0.005157*20
0.194690 - 0.247604 + 0.005157*10
0.194690 - 0.247604 + 0.005157*5
0.194690 - 0.247604 + 0.005157*15
0.194690 - 0.247604 + 0.005157*12
0.194690 - 0.247604 + 0.005157*11
0.194690 - 0.247604 + 0.005157*11
0.194690 - 0.247604 + 0.005157*10
0.194690 - 0.247604 + 0.005157*10
logit_1 <- glm(1*(fair=="Fair") ~ T*winner_game, family = binomial(link=logit), data=data_paper)
summary(logit_1)
summary(logit_1)$coefficients
exp(summary(logit_1)$coefficients)
exp(summary(logit_1)$coefficients[1,])
exp(summary(logit_1)$coefficients[,1])
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
newx <- data_paper %>% data_grid(T,winner_game,.model=logit_1)
newy <- newx %>% mutate(pred_lor = predict(logit_1, newdata = newx), pred_prob = 1/(1 + exp(-pred_lor)))
print(newy)
1.3. Agrega un control por `age` al modelo estimado en 1. Presenta un `summary()` de los resultados e interpreta el efecto de edad.
newx <- data_paper %>% data_grid(T,winner_game,.model=logit_1)
newy <- newx %>% mutate(pred_lor = predict(logit_1, newdata = newx), pred_prob = 1/(1 + exp(-pred_lor)))
print(newy)
1.3. Agrega un control por `age` al modelo estimado en 1. Presenta un `summary()` de los resultados e interpreta el efecto de edad.
newx <- data_paper %>% data_grid(T,winner_game,.model=lpm_1)
newy <- newx %>% mutate(pred_lor = predict(lpm_1, newdata = newx), pred_prob = 1/(1 + exp(-pred_lor)))
print(newy)
newx <- data_paper %>% data_grid(T,winner_game,.model=lpm_1)
newy <- newx %>% mutate(pred_prob = predict(lpm_1, newdata = newx))
print(newy)
\begin{align}
\mathbb{P}(\text{Fair} \mid T=\text{RE2}, Winner=\text{FALSE}, age=20) &= \beta_{0} + \beta_{RE2} + \beta_{age}age \\
\mathbb{P}(\text{Fair} \mid T=\text{RE2}, Winner=\text{FALSE}, age=20) &= 0.194690 -0.247604 + 0.005157 \cdot 10 \\
&= -0.001344
\end{align}
summary(logit_2)
eta = -1.489302 - 1.399864 + 0.027242*10
invlogit(eta)
1/(1 + exp(-eta))
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(10), .model=logit_2)
newy <- newx %>% mutate(pred_lor = predict(logit_2, newdata = newx), pred_prob = 1/(1 + exp(-pred_lor)))
newy
xaringan:::inf_mr()
eta = -1.489302 - 1.399864 + 0.027242*20
eta
1/(1 + exp(-eta))
0.088
1/(1 + exp(-eta))
0.08751783
1 - 0.08751783
0.08751783*0.9124822*0.027242
eta = -1.489302 - 1.399864 + 0.027242*50
1/(1 + exp(-eta))
eta = -1.489302 - 1.399864 + 0.027242*20
1/(1 + exp(-eta))
eta = -1.489302 - 1.399864 + 0.027242*50
1/(1 + exp(-eta))
0.1784234
1-0.1784234
0.1784234*0.8215766*0.027242
0.027/4
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(pred_lor = predict(logit_2, newdata = newx), pred_prob = 1/(1 + exp(-pred_lor)))
newy %>% ggplot(aes(x=age, y=pred_prob)) + geom_line()
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob)) + geom_line()
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm), colour="red") + geom_line()
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="red")) + geom_line()
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="red")) + geom_line() +
geom_line()aes(x=age, y=pred_prob_logit, colour="blue"))
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="red")) + geom_line() +
geom_line(aes(x=age, y=pred_prob_logit, colour="blue"))
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm)) + geom_line() +
geom_line(aes(x=age, y=pred_prob_logit))
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) + geom_line() +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"))
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(5,250), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) + geom_line() +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"))
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(0,250), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) + geom_line() +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"))
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(0,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) + geom_line() +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"))
eta = -1.489302 - 1.399864 + 0.027242*100
1/(1 + exp(-eta))
eta = -1.489302 - 1.399864 + 0.027242*110
1/(1 + exp(-eta))
eta = -1.489302 - 1.399864 + 0.027242*108
1/(1 + exp(-eta))
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"), size=1.5)
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(0,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = cos(linear_pred_lpm), pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"), size=1.5)
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(0,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = sin(linear_pred_lpm), pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"), size=1.5)
newx <- data_paper %>% data_grid(T="RE2",winner_game=FALSE, age=seq(0,120), .model=logit_2)
newy <- newx %>% mutate(linear_pred_lpm = predict(lpm_2, newdata = newx), linear_pred_logit = predict(logit_2, newdata = newx), pred_prob_lpm = linear_pred_lpm, pred_prob_logit = 1/(1 + exp(-linear_pred_logit)))
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"), size=1.5) +
labs(y="P(Fair)", x="Edad")
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logistic"), size=1.5) +
labs(y="P(Fair | W, RE2, age)", x="Edad")
xaringan:::inf_mr()
data_paper %>% glimpse()
data_paper <- mutate(W = case_when(winner_game==TRUE ~ 1, winner_game==FALSE ~ 0))
data_paper <- data_paper %>% mutate(W = case_when(winner_game==TRUE ~ 1, winner_game==FALSE ~ 0))
table(data_paper$winner_game,data_paper$W)
pwd
pwd()
currentwd()
cwd()
setwd("/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_categorical_data_analysis/repo/homework/t_1")
write_csv(data, "data_t_1.csv")
write_csv(data_paper, "data_t_1.csv")
data_paper <- read_csv("data_t_1.csv")
View(data_paper)
View(data_paper)
data_paper %>% select(groupId,playerId,fair,T,W,age,gender)
setwd("/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_categorical_data_analysis/repo/homework/t_1")
write_csv(data_paper, "data_t_1.csv")
# Escribir install.packages("tinytex") en la consola para instalar "tinytex"
# Carga "tinytex" para compilar PDF
library("tinytex")
library("tidyverse")
library("modelr")
data_paper <- read_csv("data_t_1.csv")
lpm_1 <- lm(1*(fair=="Fair") ~ T*winner_game, data=data_paper)
summary(lpm_1)
View(data_paper)
data_paper <- read_csv("data_t_1.csv")
data_paper <- read_csv("data_t_1.csv")
setwd("/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_categorical_data_analysis/repo/homework/t_1")
data_paper <- data_paper %>% select(groupId,playerId,fair,T,W,age,gender)
write_csv(data_paper, "data_t_1.csv")
data_paper <- read_csv("data_t_1.csv")
lpm_1 <- lm(1*(fair=="Fair") ~ T*W, data=data_paper)
summary(lpm_1)
newx <- data_paper %>% data_grid(T,W=1,.model=lpm_1)
newy <- newx %>% mutate(pred_prob = predict(lpm_1, newdata = newx))
print(newy)
lpm_2 <- lm(1*(fair=="Fair") ~ T*W + age, data=data_paper)
summary(lpm_2)
update(lm1, . + age)
update(lpm1, . + age)
update(lpm_1, . + age)
?update
update(lpm_1, . ~ . - 1age)
update(lpm_1, . ~ . - + age)
update(lpm_1, . ~ .  + age)
xaringan:::inf_mr()
xaringan:::inf_mr()
newx <- data_paper %>% data_grid(T,W=1,.model=logit_1)
logit_1 <- glm(1*(fair=="Fair") ~ T*W, family = binomial(link=logit), data=data_paper)
summary(logit_1)
newx <- data_paper %>% data_grid(T,W=1,.model=logit_1)
newy <- newx %>% mutate(pred_lor = predict(logit_1, newdata = newx), pred_prob = 1/(1 + exp(-pred_lor)))
print(newy)
newx <- data_paper %>% data_grid(T,W=1,.model=lpm_1)
newy <- newx %>% mutate(pred_prob = predict(lpm_1, newdata = newx))
print(newy)
logit_2 <- glm(1*(fair=="Fair") ~ T*W + age, family = binomial(link=logit), data=data_paper)
summary(logit_2)
a = -1.489 - 1.399 + 0.027*20
1/(1 + exp(-a))
a = -1.489 - 1.399 + 0.027*50
1/(1 + exp(-a))
lpm_2 <- lm(1*(fair=="Fair") ~ T*W + age, data=data_paper)
summary(lpm_2)
a = -1.489 + 0.027*50
1/(1 + exp(-a))
1 - 0.4653058
0.027 * 0.4653058 *  0.5346942
1-0.178
1-0.465
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
mi_lpm = lpm_2
mi_logit = logit_2
mi_linear_pred_lpm = predict(mi_lpm , newdata = newx)
mi_linear_pred_logit = predict(mi_logit, newdata = newx)
mi_pred_prob_lpm = mi_linear_pred_lpm
mi_pred_prob_logit = 1/(1 + exp(- mi_linear_pred_logit))
newy <- newx %>% mutate(linear_pred_lpm = mi_linear_pred_lpm,
linear_pred_logit = mi_linear_pred_logit,
pred_prob_lpm = mi_pred_prob_lpm,
pred_prob_logit = mi_pred_prob_logit)
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logística"), size=1.5) +
labs(y="P(Fair | W, RE2, age)", x="Edad", colour="modelo")
sin(mi_linear_pred_lpm)
?cotan
?tan
mi_lpm = lpm_2
mi_logit = logit_2
mi_lpm = lpm_2
mi_logit = logit_2
# crea un nuevo set de datos sobre los cuales crear predicciones
newx <- data_paper %>% data_grid(T="RE2",W=0, age=seq(0,120), .model=logit_2)
# crear valores predichos para el nuevo set de datos
mi_linear_pred_lpm = predict(mi_lpm , newdata = newx)
mi_linear_pred_logit = predict(mi_logit, newdata = newx)
mi_pred_prob_lpm = cos(mi_linear_pred_lpm)
mi_pred_prob_logit = tan(mi_linear_pred_logit) - 1
newy <- newx %>% mutate(linear_pred_lpm = mi_linear_pred_lpm,
linear_pred_logit = mi_linear_pred_logit,
pred_prob_lpm = mi_pred_prob_lpm,
pred_prob_logit = mi_pred_prob_logit)
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logística"), size=1.5) +
labs(y="P(Fair | W, RE2, age)", x="Edad", colour="modelo")
mi_lpm = lpm_2
mi_logit = logit_2
# crea un nuevo set de datos sobre los cuales crear predicciones
newx <- data_paper %>% data_grid(T="RE2",W=0, age=seq(0,120), .model=logit_2)
# crear valores predichos para el nuevo set de datos
mi_linear_pred_lpm = predict(mi_lpm , newdata = newx)
mi_linear_pred_logit = predict(mi_logit, newdata = newx)
mi_pred_prob_lpm = cos(mi_linear_pred_lpm) + 1
mi_pred_prob_logit = sin(mi_linear_pred_logit) - 1
newy <- newx %>% mutate(linear_pred_lpm = mi_linear_pred_lpm,
linear_pred_logit = mi_linear_pred_logit,
pred_prob_lpm = mi_pred_prob_lpm,
pred_prob_logit = mi_pred_prob_logit)
# crea gráfico
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logística"), size=1.5) +
labs(y="P(Fair | W, RE2, age)", x="Edad", colour="modelo")
# crea un nuevo set de datos sobre los cuales crear predicciones
newx <- data_paper %>% data_grid(T="RE2",W=0, age=seq(0,120), .model=logit_2)
# crear valores predichos para el nuevo set de datos
mi_linear_pred_lpm = predict(mi_lpm , newdata = newx)
mi_linear_pred_logit = predict(mi_logit, newdata = newx)
mi_pred_prob_lpm = cos(mi_linear_pred_lpm) - 1
mi_pred_prob_logit = sin(mi_linear_pred_logit) + 1
newy <- newx %>% mutate(linear_pred_lpm = mi_linear_pred_lpm,
linear_pred_logit = mi_linear_pred_logit,
pred_prob_lpm = mi_pred_prob_lpm,
pred_prob_logit = mi_pred_prob_logit)
# crea gráfico
newy %>% ggplot(aes(x=age, y=pred_prob_lpm, colour="LPM")) +
geom_line(size=1.5) +
geom_line(aes(x=age, y=pred_prob_logit, colour="Logística"), size=1.5) +
labs(y="P(Fair | W, RE2, age)", x="Edad", colour="modelo")
lpm_1 <- lm(1*(fair=="Fair") ~ T*W, data=data_paper)
summary(lpm_1)
logit_1 <- glm(1*(fair=="Fair") ~ T*W, family = binomial(link=logit), data=data_paper)
summary(logit_1)
exp(summary(logit_1)$coefficients[,1])
2 + 2
x=2*2
class(x)
is.numeric(x)
"1"
TRUE == 1
FALSE == 0
factor()
y
y <- x:10; y
mystr <- "texto"; mystr
paste(mystr, "!!", sep="")
paste( c(mystr,"!","!"), collapse = "-")
x <- rep(1:3, 2); x # "replicate" secuencia 1:3 dos veces
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
factor_x
x <- rep(1:3, 2); x # "replicate" secuencia 1:3 dos veces
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
y <- seq(10:15)
lm(y ~ factor_x)
x <- rep(1:3,2)
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("B","A","C"))
y <- seq(10:15)
lm(y ~ factor_x)
x <- rep(1:3, 2); x # "replicate" secuencia 1:3 dos veces
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
y <- seq(10:15)
lm(y ~ factor_x)
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("B","A","C"))
lm(y ~ factor_x)
x <- rep(1:3, 2); x # "replicate" secuencia 1:3 dos veces
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
y <- seq(10:15)
lm(y ~ factor_x)
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("B","A","C"))
lm(y ~ factor_x)
factor(x, levels=c(1, 2, 3), labels=c("B","A","C"))
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
y <- seq(10:15)
y
seq(10:15)
10:15
y <- 10:15
x <- rep(1:3, 2); x # "replicate" secuencia 1:3 dos veces
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
y <- 10:15
lm(y ~ factor_x)
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("B","A","C"))
lm(y ~ factor_x)
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("B","A","C")); factor_x
factor_x <- factor(x, levels=c(2, 1, 3), labels=c("B","A","C")); factor_x
lm(y ~ factor_x)
x <- rep(1:3, 2); x # "replicate" secuencia 1:3 dos veces
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
y <- 10:15
lm(y ~ factor_x)
## Reordernar etiquetas de factores
factor_x <- factor(x, levels=c(2, 1, 3), labels=c("A","B","C")); factor_x
lm(y ~ factor_x)
x <- rep(1:3, 2); x # "replicate" secuencia 1:3 dos veces
factor_x <- factor(x, levels=c(1, 2, 3), labels=c("A","B","C")); factor_x
y <- 10:15
lm(y ~ factor_x)
## Reordernar etiquetas de factores
factor_x <- factor(x, levels=c(2, 1, 3), labels=c("B","C","A")); factor_x
lm(y ~ factor_x)
as.numeric(factor_x)
as.numeric(factor_x)
as.character(factor_x)
xaringan:::inf_mr()
v1 <- sample(1:100,10)
v2 <- sample(letters,10)
mymatrix <- cbind(v1,v2)
mymatrix
mynumbers <- matrix(NULL, nrow= 10,ncol = 2)
mynumbers <- matrix(NA, nrow= 10,ncol = 2)
mynumbers
mynumbers <- matrix(NA, nrow= 10,ncol = 2)
for(i in 1:10){
root2 =  sqrt(i)
print(root2)
mynumbers[i,1] <- i
mynumbers[i,2] <- root2
}
mynumbers
60/5
library("car")
library("Car")
library("CarData")
library("CarData")
install.packages("carData")
library("CarData")
install.packages("CarData")
library("CarData")
install.packages("carData")
library("carData")
install.packages("carData")
?carData
?carData
data("Duncan")
datos_duncan <- Duncan
head(datos_duncan)
subdatos_duncan <- datos_duncan[,c("type","prestige")]
subdatos_duncan
dim(subdatos_duncan)
subdatos_duncan <- datos_duncan[,c("type","education","prestige")]
dim(subdatos_duncan)
summary(subdatos_duncan)
mean(subdatos_duncan$education)
is.na(subdatos_duncan$education)
subdatos_duncan$educacion_agg <- NA
subdatos_duncan$educacion_agg[subdatos_duncan$education > education_promedio] <- 1
is.na(subdatos_duncan$education)
education_promedio <- mean(subdatos_duncan$education)
education_promedio
subdatos_duncan$educacion_agg[subdatos_duncan$education > education_promedio] <- 1
subdatos_duncan$educacion_agg[subdatos_duncan$education <= education_promedio] <- 0
for (i in 0:1) {
mean(subdatos_duncan$prestige[subdatos_duncan$educacion_agg==i])
}
for (i in 0:1) {
print(mean(subdatos_duncan$prestige[subdatos_duncan$educacion_agg==i]))
}
for (i in 0:1) {
print(mean(subdatos_duncan$prestige[subdatos_duncan$educacion_agg==i]))
print(sd(subdatos_duncan$prestige[subdatos_duncan$educacion_agg==i]))
}
plot(subdatos_duncan$prestige,subdatos_duncan$education)
plot(subdatos_duncan$prestige,subdatos_duncan$education, x="Prestige")
plot(subdatos_duncan$prestige,subdatos_duncan$education, xlab="Prestige", ylab = ="Education")
plot(subdatos_duncan$prestige,subdatos_duncan$education, xlab="Prestige", ylab="Education")
################################################## Preámbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("readstata13")
library("stargazer")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/repo/slides/class_4/"
dircode     <- paste0(folder,"code/")
dirdata 	  <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
############################################# Importar datos #################################################
# Set working directory
setwd(dirdata)
getwd()
essdata <- read.dta13("ESS8_subset.dta", convert.factors=FALSE); essdata
########################################## Exploración de datos ##############################################
# Llama otro R script que contiene análisis.
# Organizar el trabajo de esta manera permite que el código sea más legible y manejable.
# Establece el directorio de trabajo correspondiente
setwd(dircode)
source("2_exploration.R")
############################################ Data analysis ################################################
# Set working directory
setwd(dircode)
source("3_analyses.R")
########################################### Recodificación ################################################
# Establece el directorio de trabajo correspondiente
setwd(dircode)
source("3_recoding.R")
# Seleccionar set de datos de interés
vars <- c("cntry","gndr","yrbrn","eisced")
essdata_sub <- essdata[,vars]
dim(essdata_sub)
head(essdata_sub)
# filtra filas que cumplen condición lógica
attach(essdata_sub)
essdata_sub <- essdata_sub[cntry!="AT" & yrbrn>1990, ]
dim(essdata_sub)
# crea nueva variable
age <- 2019 - yrbrn
essdata_sub$age <- 2019 - yrbrn
# recodifica variable existente
essdata_sub$gndr_string = ifelse(gndr == 1, "Male", ifelse(gndr == 2, "Female", NA))
sum(is.na(essdata_sub$gndr_string))
sum(is.na(essdata_sub$gndr))
detach(essdata_sub)
################################################## Preámbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("readstata13")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2020_2_data_analysis_r/repo/slides/class_4/workflow/"
dircode     <- paste0(folder,"code/")
dirdata 	  <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
############################################# Importar datos #################################################
# Set working directory
setwd(dirdata)
getwd()
essdata <- read.dta13("ESS8_subset.dta", convert.factors=FALSE); essdata
########################################## Exploración de datos ##############################################
# Llama otro R script que contiene análisis.
# Organizar el trabajo de esta manera permite que el código sea más legible y manejable.
# Establece el directorio de trabajo correspondiente
setwd(dircode)
source("2_exploration.R")
